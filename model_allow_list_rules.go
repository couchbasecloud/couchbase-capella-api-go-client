/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecloud

import (
	"encoding/json"
	"fmt"
)

// AllowListRules the model 'AllowListRules'
type AllowListRules string

// List of allowListRules
const (
	TEMPORARY AllowListRules = "temporary"
	PERMANENT AllowListRules = "permanent"
)

var allowedAllowListRulesEnumValues = []AllowListRules{
	"temporary",
	"permanent",
}

func (v *AllowListRules) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AllowListRules(value)
	for _, existing := range allowedAllowListRulesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AllowListRules", value)
}

// NewAllowListRulesFromValue returns a pointer to a valid AllowListRules
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAllowListRulesFromValue(v string) (*AllowListRules, error) {
	ev := AllowListRules(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AllowListRules: valid values are %v", v, allowedAllowListRulesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AllowListRules) IsValid() bool {
	for _, existing := range allowedAllowListRulesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to allowListRules value
func (v AllowListRules) Ptr() *AllowListRules {
	return &v
}

type NullableAllowListRules struct {
	value *AllowListRules
	isSet bool
}

func (v NullableAllowListRules) Get() *AllowListRules {
	return v.value
}

func (v *NullableAllowListRules) Set(val *AllowListRules) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowListRules) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowListRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowListRules(val *AllowListRules) *NullableAllowListRules {
	return &NullableAllowListRules{value: val, isSet: true}
}

func (v NullableAllowListRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowListRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

