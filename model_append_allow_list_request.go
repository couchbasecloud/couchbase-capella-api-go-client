/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecapella

import (
	"encoding/json"
)

// AppendAllowListRequest struct for AppendAllowListRequest
type AppendAllowListRequest struct {
	CidrBlock string `json:"cidrBlock"`
	RuleType AllowListRules `json:"ruleType"`
	Comment *string `json:"comment,omitempty"`
	// The duration you would like the temporary cidr block to be active
	Duration *string `json:"duration,omitempty"`
}

// NewAppendAllowListRequest instantiates a new AppendAllowListRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppendAllowListRequest(cidrBlock string, ruleType AllowListRules) *AppendAllowListRequest {
	this := AppendAllowListRequest{}
	this.CidrBlock = cidrBlock
	this.RuleType = ruleType
	return &this
}

// NewAppendAllowListRequestWithDefaults instantiates a new AppendAllowListRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppendAllowListRequestWithDefaults() *AppendAllowListRequest {
	this := AppendAllowListRequest{}
	return &this
}

// GetCidrBlock returns the CidrBlock field value
func (o *AppendAllowListRequest) GetCidrBlock() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CidrBlock
}

// GetCidrBlockOk returns a tuple with the CidrBlock field value
// and a boolean to check if the value has been set.
func (o *AppendAllowListRequest) GetCidrBlockOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CidrBlock, true
}

// SetCidrBlock sets field value
func (o *AppendAllowListRequest) SetCidrBlock(v string) {
	o.CidrBlock = v
}

// GetRuleType returns the RuleType field value
func (o *AppendAllowListRequest) GetRuleType() AllowListRules {
	if o == nil {
		var ret AllowListRules
		return ret
	}

	return o.RuleType
}

// GetRuleTypeOk returns a tuple with the RuleType field value
// and a boolean to check if the value has been set.
func (o *AppendAllowListRequest) GetRuleTypeOk() (*AllowListRules, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RuleType, true
}

// SetRuleType sets field value
func (o *AppendAllowListRequest) SetRuleType(v AllowListRules) {
	o.RuleType = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *AppendAllowListRequest) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppendAllowListRequest) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *AppendAllowListRequest) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *AppendAllowListRequest) SetComment(v string) {
	o.Comment = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *AppendAllowListRequest) GetDuration() string {
	if o == nil || o.Duration == nil {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppendAllowListRequest) GetDurationOk() (*string, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *AppendAllowListRequest) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *AppendAllowListRequest) SetDuration(v string) {
	o.Duration = &v
}

func (o AppendAllowListRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cidrBlock"] = o.CidrBlock
	}
	if true {
		toSerialize["ruleType"] = o.RuleType
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	return json.Marshal(toSerialize)
}

type NullableAppendAllowListRequest struct {
	value *AppendAllowListRequest
	isSet bool
}

func (v NullableAppendAllowListRequest) Get() *AppendAllowListRequest {
	return v.value
}

func (v *NullableAppendAllowListRequest) Set(val *AppendAllowListRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAppendAllowListRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAppendAllowListRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppendAllowListRequest(val *AppendAllowListRequest) *NullableAppendAllowListRequest {
	return &NullableAppendAllowListRequest{value: val, isSet: true}
}

func (v NullableAppendAllowListRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppendAllowListRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


