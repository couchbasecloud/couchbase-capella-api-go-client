/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecloud

import (
	"encoding/json"
)

// BucketRole Specifies the roles of the user for the given bucket If name is blank, the permission would apply to all buckets on the database for the user. 
type BucketRole struct {
	// Bucket Name
	Name string `json:"name"`
	Roles []BucketRoleTypes `json:"roles"`
}

// NewBucketRole instantiates a new BucketRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketRole(name string, roles []BucketRoleTypes) *BucketRole {
	this := BucketRole{}
	this.Name = name
	this.Roles = roles
	return &this
}

// NewBucketRoleWithDefaults instantiates a new BucketRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketRoleWithDefaults() *BucketRole {
	this := BucketRole{}
	return &this
}

// GetName returns the Name field value
func (o *BucketRole) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BucketRole) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BucketRole) SetName(v string) {
	o.Name = v
}

// GetRoles returns the Roles field value
func (o *BucketRole) GetRoles() []BucketRoleTypes {
	if o == nil {
		var ret []BucketRoleTypes
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *BucketRole) GetRolesOk() (*[]BucketRoleTypes, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Roles, true
}

// SetRoles sets field value
func (o *BucketRole) SetRoles(v []BucketRoleTypes) {
	o.Roles = v
}

func (o BucketRole) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableBucketRole struct {
	value *BucketRole
	isSet bool
}

func (v NullableBucketRole) Get() *BucketRole {
	return v.value
}

func (v *NullableBucketRole) Set(val *BucketRole) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketRole) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketRole(val *BucketRole) *NullableBucketRole {
	return &NullableBucketRole{value: val, isSet: true}
}

func (v NullableBucketRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


