/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecapella

import (
	"encoding/json"
)

// V3Place Cluster deployment location based on the value provided in environment
type V3Place struct {
	// Has to be true if the supportPackage.type is equal to \"Basic\"
	SingleAZ bool `json:"singleAZ"`
	Hosted *V3PlaceHosted `json:"hosted,omitempty"`
}

// NewV3Place instantiates a new V3Place object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3Place(singleAZ bool) *V3Place {
	this := V3Place{}
	this.SingleAZ = singleAZ
	return &this
}

// NewV3PlaceWithDefaults instantiates a new V3Place object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3PlaceWithDefaults() *V3Place {
	this := V3Place{}
	return &this
}

// GetSingleAZ returns the SingleAZ field value
func (o *V3Place) GetSingleAZ() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SingleAZ
}

// GetSingleAZOk returns a tuple with the SingleAZ field value
// and a boolean to check if the value has been set.
func (o *V3Place) GetSingleAZOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SingleAZ, true
}

// SetSingleAZ sets field value
func (o *V3Place) SetSingleAZ(v bool) {
	o.SingleAZ = v
}

// GetHosted returns the Hosted field value if set, zero value otherwise.
func (o *V3Place) GetHosted() V3PlaceHosted {
	if o == nil || o.Hosted == nil {
		var ret V3PlaceHosted
		return ret
	}
	return *o.Hosted
}

// GetHostedOk returns a tuple with the Hosted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3Place) GetHostedOk() (*V3PlaceHosted, bool) {
	if o == nil || o.Hosted == nil {
		return nil, false
	}
	return o.Hosted, true
}

// HasHosted returns a boolean if a field has been set.
func (o *V3Place) HasHosted() bool {
	if o != nil && o.Hosted != nil {
		return true
	}

	return false
}

// SetHosted gets a reference to the given V3PlaceHosted and assigns it to the Hosted field.
func (o *V3Place) SetHosted(v V3PlaceHosted) {
	o.Hosted = &v
}

func (o V3Place) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["singleAZ"] = o.SingleAZ
	}
	if o.Hosted != nil {
		toSerialize["hosted"] = o.Hosted
	}
	return json.Marshal(toSerialize)
}

type NullableV3Place struct {
	value *V3Place
	isSet bool
}

func (v NullableV3Place) Get() *V3Place {
	return v.value
}

func (v *NullableV3Place) Set(val *V3Place) {
	v.value = val
	v.isSet = true
}

func (v NullableV3Place) IsSet() bool {
	return v.isSet
}

func (v *NullableV3Place) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3Place(val *V3Place) *NullableV3Place {
	return &NullableV3Place{value: val, isSet: true}
}

func (v NullableV3Place) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3Place) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


