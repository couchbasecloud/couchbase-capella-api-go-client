/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecapella

import (
	"encoding/json"
)

// CursorHrefs struct for CursorHrefs
type CursorHrefs struct {
	First string `json:"first"`
	Last *string `json:"last,omitempty"`
	Previous *string `json:"previous,omitempty"`
	Next *string `json:"next,omitempty"`
}

// NewCursorHrefs instantiates a new CursorHrefs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCursorHrefs(first string) *CursorHrefs {
	this := CursorHrefs{}
	this.First = first
	return &this
}

// NewCursorHrefsWithDefaults instantiates a new CursorHrefs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCursorHrefsWithDefaults() *CursorHrefs {
	this := CursorHrefs{}
	return &this
}

// GetFirst returns the First field value
func (o *CursorHrefs) GetFirst() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.First
}

// GetFirstOk returns a tuple with the First field value
// and a boolean to check if the value has been set.
func (o *CursorHrefs) GetFirstOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.First, true
}

// SetFirst sets field value
func (o *CursorHrefs) SetFirst(v string) {
	o.First = v
}

// GetLast returns the Last field value if set, zero value otherwise.
func (o *CursorHrefs) GetLast() string {
	if o == nil || o.Last == nil {
		var ret string
		return ret
	}
	return *o.Last
}

// GetLastOk returns a tuple with the Last field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CursorHrefs) GetLastOk() (*string, bool) {
	if o == nil || o.Last == nil {
		return nil, false
	}
	return o.Last, true
}

// HasLast returns a boolean if a field has been set.
func (o *CursorHrefs) HasLast() bool {
	if o != nil && o.Last != nil {
		return true
	}

	return false
}

// SetLast gets a reference to the given string and assigns it to the Last field.
func (o *CursorHrefs) SetLast(v string) {
	o.Last = &v
}

// GetPrevious returns the Previous field value if set, zero value otherwise.
func (o *CursorHrefs) GetPrevious() string {
	if o == nil || o.Previous == nil {
		var ret string
		return ret
	}
	return *o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CursorHrefs) GetPreviousOk() (*string, bool) {
	if o == nil || o.Previous == nil {
		return nil, false
	}
	return o.Previous, true
}

// HasPrevious returns a boolean if a field has been set.
func (o *CursorHrefs) HasPrevious() bool {
	if o != nil && o.Previous != nil {
		return true
	}

	return false
}

// SetPrevious gets a reference to the given string and assigns it to the Previous field.
func (o *CursorHrefs) SetPrevious(v string) {
	o.Previous = &v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *CursorHrefs) GetNext() string {
	if o == nil || o.Next == nil {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CursorHrefs) GetNextOk() (*string, bool) {
	if o == nil || o.Next == nil {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *CursorHrefs) HasNext() bool {
	if o != nil && o.Next != nil {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *CursorHrefs) SetNext(v string) {
	o.Next = &v
}

func (o CursorHrefs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["first"] = o.First
	}
	if o.Last != nil {
		toSerialize["last"] = o.Last
	}
	if o.Previous != nil {
		toSerialize["previous"] = o.Previous
	}
	if o.Next != nil {
		toSerialize["next"] = o.Next
	}
	return json.Marshal(toSerialize)
}

type NullableCursorHrefs struct {
	value *CursorHrefs
	isSet bool
}

func (v NullableCursorHrefs) Get() *CursorHrefs {
	return v.value
}

func (v *NullableCursorHrefs) Set(val *CursorHrefs) {
	v.value = val
	v.isSet = true
}

func (v NullableCursorHrefs) IsSet() bool {
	return v.isSet
}

func (v *NullableCursorHrefs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCursorHrefs(val *CursorHrefs) *NullableCursorHrefs {
	return &NullableCursorHrefs{value: val, isSet: true}
}

func (v NullableCursorHrefs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCursorHrefs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


