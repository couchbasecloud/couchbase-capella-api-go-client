/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecapella

import (
	"encoding/json"
	"fmt"
)

// V3SupportPackageType the model 'V3SupportPackageType'
type V3SupportPackageType string

// List of v3SupportPackageType
const (
	V3SUPPORTPACKAGETYPE_BASIC V3SupportPackageType = "Basic"
	V3SUPPORTPACKAGETYPE_DEVELOPER_PRO V3SupportPackageType = "DeveloperPro"
	V3SUPPORTPACKAGETYPE_ENTERPRISE V3SupportPackageType = "Enterprise"
)

var allowedV3SupportPackageTypeEnumValues = []V3SupportPackageType{
	"Basic",
	"DeveloperPro",
	"Enterprise",
}

func (v *V3SupportPackageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V3SupportPackageType(value)
	for _, existing := range allowedV3SupportPackageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V3SupportPackageType", value)
}

// NewV3SupportPackageTypeFromValue returns a pointer to a valid V3SupportPackageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV3SupportPackageTypeFromValue(v string) (*V3SupportPackageType, error) {
	ev := V3SupportPackageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V3SupportPackageType: valid values are %v", v, allowedV3SupportPackageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V3SupportPackageType) IsValid() bool {
	for _, existing := range allowedV3SupportPackageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v3SupportPackageType value
func (v V3SupportPackageType) Ptr() *V3SupportPackageType {
	return &v
}

type NullableV3SupportPackageType struct {
	value *V3SupportPackageType
	isSet bool
}

func (v NullableV3SupportPackageType) Get() *V3SupportPackageType {
	return v.value
}

func (v *NullableV3SupportPackageType) Set(val *V3SupportPackageType) {
	v.value = val
	v.isSet = true
}

func (v NullableV3SupportPackageType) IsSet() bool {
	return v.isSet
}

func (v *NullableV3SupportPackageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3SupportPackageType(val *V3SupportPackageType) *NullableV3SupportPackageType {
	return &NullableV3SupportPackageType{value: val, isSet: true}
}

func (v NullableV3SupportPackageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3SupportPackageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

