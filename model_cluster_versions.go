/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecloud

import (
	"encoding/json"
	"fmt"
)

// ClusterVersions If not defined the latest version of Couchbase Server is deployed. * `latest` - the a static version representing a deployment of the most recent dataplane components 
type ClusterVersions string

// List of clusterVersions
const (
	LATEST ClusterVersions = "latest"
	ENTERPRISE_6_5_0 ClusterVersions = "enterprise-6.5.0"
	ENTERPRISE_6_5_1 ClusterVersions = "enterprise-6.5.1"
	ENTERPRISE_6_6_0 ClusterVersions = "enterprise-6.6.0"
)

var allowedClusterVersionsEnumValues = []ClusterVersions{
	"latest",
	"enterprise-6.5.0",
	"enterprise-6.5.1",
	"enterprise-6.6.0",
}

func (v *ClusterVersions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterVersions(value)
	for _, existing := range allowedClusterVersionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterVersions", value)
}

// NewClusterVersionsFromValue returns a pointer to a valid ClusterVersions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterVersionsFromValue(v string) (*ClusterVersions, error) {
	ev := ClusterVersions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterVersions: valid values are %v", v, allowedClusterVersionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterVersions) IsValid() bool {
	for _, existing := range allowedClusterVersionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to clusterVersions value
func (v ClusterVersions) Ptr() *ClusterVersions {
	return &v
}

type NullableClusterVersions struct {
	value *ClusterVersions
	isSet bool
}

func (v NullableClusterVersions) Get() *ClusterVersions {
	return v.value
}

func (v *NullableClusterVersions) Set(val *ClusterVersions) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterVersions) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterVersions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterVersions(val *ClusterVersions) *NullableClusterVersions {
	return &NullableClusterVersions{value: val, isSet: true}
}

func (v NullableClusterVersions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterVersions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

