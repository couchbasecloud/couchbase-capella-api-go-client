/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecloud

import (
	"encoding/json"
	"fmt"
)

// SupportTimezones * `ET` - Eastern Time * `GMT` - Greenwich Mean Time * `IST` - India Standard Time * `PT` - Pacific Time 
type SupportTimezones string

// List of supportTimezones
const (
	ET SupportTimezones = "ET"
	GMT SupportTimezones = "GMT"
	IST SupportTimezones = "IST"
	PT SupportTimezones = "PT"
)

var allowedSupportTimezonesEnumValues = []SupportTimezones{
	"ET",
	"GMT",
	"IST",
	"PT",
}

func (v *SupportTimezones) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SupportTimezones(value)
	for _, existing := range allowedSupportTimezonesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SupportTimezones", value)
}

// NewSupportTimezonesFromValue returns a pointer to a valid SupportTimezones
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSupportTimezonesFromValue(v string) (*SupportTimezones, error) {
	ev := SupportTimezones(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SupportTimezones: valid values are %v", v, allowedSupportTimezonesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SupportTimezones) IsValid() bool {
	for _, existing := range allowedSupportTimezonesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to supportTimezones value
func (v SupportTimezones) Ptr() *SupportTimezones {
	return &v
}

type NullableSupportTimezones struct {
	value *SupportTimezones
	isSet bool
}

func (v NullableSupportTimezones) Get() *SupportTimezones {
	return v.value
}

func (v *NullableSupportTimezones) Set(val *SupportTimezones) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportTimezones) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportTimezones) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportTimezones(val *SupportTimezones) *NullableSupportTimezones {
	return &NullableSupportTimezones{value: val, isSet: true}
}

func (v NullableSupportTimezones) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportTimezones) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

