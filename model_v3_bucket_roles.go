/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecapella

import (
	"encoding/json"
	"fmt"
)

// V3BucketRoles * `data_writer` - Gives the user permission to read and write data for the bucket. * `data_reader` - Gives the user read-only permission for the bucket. 
type V3BucketRoles string

// List of v3BucketRoles
const (
	V3BUCKETROLES_WRITER V3BucketRoles = "data_writer"
	V3BUCKETROLES_READER V3BucketRoles = "data_reader"
)

var allowedV3BucketRolesEnumValues = []V3BucketRoles{
	"data_writer",
	"data_reader",
}

func (v *V3BucketRoles) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V3BucketRoles(value)
	for _, existing := range allowedV3BucketRolesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V3BucketRoles", value)
}

// NewV3BucketRolesFromValue returns a pointer to a valid V3BucketRoles
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV3BucketRolesFromValue(v string) (*V3BucketRoles, error) {
	ev := V3BucketRoles(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V3BucketRoles: valid values are %v", v, allowedV3BucketRolesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V3BucketRoles) IsValid() bool {
	for _, existing := range allowedV3BucketRolesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v3BucketRoles value
func (v V3BucketRoles) Ptr() *V3BucketRoles {
	return &v
}

type NullableV3BucketRoles struct {
	value *V3BucketRoles
	isSet bool
}

func (v NullableV3BucketRoles) Get() *V3BucketRoles {
	return v.value
}

func (v *NullableV3BucketRoles) Set(val *V3BucketRoles) {
	v.value = val
	v.isSet = true
}

func (v NullableV3BucketRoles) IsSet() bool {
	return v.isSet
}

func (v *NullableV3BucketRoles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3BucketRoles(val *V3BucketRoles) *NullableV3BucketRoles {
	return &NullableV3BucketRoles{value: val, isSet: true}
}

func (v NullableV3BucketRoles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3BucketRoles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

