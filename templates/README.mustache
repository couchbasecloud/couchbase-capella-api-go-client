# Go API client for {{packageName}}

[![Go Reference](https://pkg.go.dev/badge/github.com/couchbaselabs/couchbase-cloud-go-client.svg)](https://pkg.go.dev/github.com/couchbaselabs/couchbase-cloud-go-client)

{{#appDescriptionWithNewLines}}
    {{{.}}}
{{/appDescriptionWithNewLines}}

## Overview
This API client was generated by the [OpenAPI Generator](https://openapi-generator.tech) project.  By using the [OpenAPI-spec](https://www.openapis.org/) from a remote server, you can easily generate an API client.

- API version: {{appVersion}}
- Package version: {{packageVersion}}
{{^hideGenerationTimestamp}}
    - Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Build package: {{generatorClass}}
{{#infoUrl}}
    For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

## Configuring environment variables 

In order to set up authentication a programmatic API key must be generated. 
Instructions to generate your API key can be found in the [Couchbase Capella Public API documentation](https://docs.couchbase.com/cloud/public-api-guide/using-cloud-public-api.html).

You will need to provide your credentials for authentication via the environment variables,
`CBC_ACCESS_KEY` and `CBC_SECRET_KEY`,
for your access and secret API Key Pair respectively.

```sh
$  export CBC_ACCESS_KEY="xxxx"
$  export CBC_SECRET_KEY="xxxx"
```

## Installation

Install the following dependency:

```shell
go get github.com/couchbasecloud/couchbase-capella-api-go-client
```

Add the following in import:

```golang
import "github.com/couchbasecloud/couchbase-capella-api-go-client"
```


Creating an API client
```golang
ctx := context.WithValue(
    context.Background(),
    couchbasecloud.ContextAPIKeys,
    map[string]couchbasecloud.APIKey{
        "accessKey": {
            Key: os.Getenv("CBC_ACCESS_KEY"),
        },
        "secretKey": {
            Key: os.Getenv("CBC_SECRET_KEY"),
        },
    },
)
configuration := couchbasecloud.NewConfiguration()
apiClient := couchbasecloud.NewAPIClient(configuration)
```

API usage - Retrieving a project
```golang
projectId := "39eidkdhe-48389-dk38-8e84-34038djsjks"
project, _, err := apiClient.ProjectsApi.ProjectsShow(ctx, projectId).Execute()

if err != nil {
    t.Fatalf("Error when calling `ProjectsApi.ProjectsShow(ctx)`: %v\n", err)
}

fmt.Fprintf(os.Stdout, "Response from `ProjectsApi.ProjectsShow(ctx)`: %v\n", project)
```

To use a proxy server, set the environment variable `HTTP_PROXY`:

```golang
os.Setenv("HTTP_PROXY", "http://proxy_name:proxy_port")
```

## Configuration of Server URL

Default configuration comes with `Servers` field that contains server objects as defined in the OpenAPI specification.

### Select Server Configuration

For using other server than the one defined on index 0 set context value `sw.ContextServerIndex` of type `int`.

```golang
ctx := context.WithValue(context.Background(), sw.ContextServerIndex, 1)
```

### Templated Server URL

Templated server URL is formatted using default variables from configuration or from context value `sw.ContextServerVariables` of type `map[string]string`.

```golang
ctx := context.WithValue(context.Background(), sw.ContextServerVariables, map[string]string{
"basePath": "v2",
})
```

Note, enum values are always validated and all unused variables are silently ignored.

### URLs Configuration per Operation

Each operation can use different server URL defined using `OperationServers` map in the `Configuration`.
An operation is uniquely identified by `"{classname}Service.{nickname}"` string.
Similar rules for overriding default operation server index and variables applies by using `sw.ContextOperationServerIndices` and `sw.ContextOperationServerVariables` context maps.

```
ctx := context.WithValue(context.Background(), sw.ContextOperationServerIndices, map[string]int{
"{classname}Service.{nickname}": 2,
})
ctx = context.WithValue(context.Background(), sw.ContextOperationServerVariables, map[string]map[string]string{
"{classname}Service.{nickname}": {
"port": "8443",
},
})
```

## Documentation for API Endpoints

All URIs are relative to *{{basePath}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{classname}}* | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationIdLowerCase}}) | **{{httpMethod}}** {{path}} | {{summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Documentation For Models

{{#models}}{{#model}} - [{{{classname}}}]({{modelDocPath}}{{{classname}}}.md)
{{/model}}{{/models}}

## Documentation for Utility Methods

Due to the fact that model structure members are all pointers, this package contains
a number of utility functions to easily obtain pointers to values of basic types.
Each of these functions takes a value of the given basic type and returns a pointer to it:

* `PtrBool`
* `PtrInt`
* `PtrInt32`
* `PtrInt64`
* `PtrFloat`
* `PtrFloat32`
* `PtrFloat64`
* `PtrString`
* `PtrTime`

## Author

{{#apiInfo}}{{#apis}}{{#-last}}{{infoEmail}}
{{/-last}}{{/apis}}{{/apiInfo}}
