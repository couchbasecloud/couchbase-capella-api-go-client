/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecapella

import (
	"encoding/json"
	"fmt"
)

// V3CouchbaseServices the model 'V3CouchbaseServices'
type V3CouchbaseServices string

// List of v3CouchbaseServices
const (
	V3COUCHBASESERVICES_DATA V3CouchbaseServices = "data"
	V3COUCHBASESERVICES_INDEX V3CouchbaseServices = "index"
	V3COUCHBASESERVICES_QUERY V3CouchbaseServices = "query"
	V3COUCHBASESERVICES_SEARCH V3CouchbaseServices = "search"
	V3COUCHBASESERVICES_EVENTING V3CouchbaseServices = "eventing"
	V3COUCHBASESERVICES_ANALYTICS V3CouchbaseServices = "analytics"
)

var allowedV3CouchbaseServicesEnumValues = []V3CouchbaseServices{
	"data",
	"index",
	"query",
	"search",
	"eventing",
	"analytics",
}

func (v *V3CouchbaseServices) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V3CouchbaseServices(value)
	for _, existing := range allowedV3CouchbaseServicesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V3CouchbaseServices", value)
}

// NewV3CouchbaseServicesFromValue returns a pointer to a valid V3CouchbaseServices
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV3CouchbaseServicesFromValue(v string) (*V3CouchbaseServices, error) {
	ev := V3CouchbaseServices(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V3CouchbaseServices: valid values are %v", v, allowedV3CouchbaseServicesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V3CouchbaseServices) IsValid() bool {
	for _, existing := range allowedV3CouchbaseServicesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v3CouchbaseServices value
func (v V3CouchbaseServices) Ptr() *V3CouchbaseServices {
	return &v
}

type NullableV3CouchbaseServices struct {
	value *V3CouchbaseServices
	isSet bool
}

func (v NullableV3CouchbaseServices) Get() *V3CouchbaseServices {
	return v.value
}

func (v *NullableV3CouchbaseServices) Set(val *V3CouchbaseServices) {
	v.value = val
	v.isSet = true
}

func (v NullableV3CouchbaseServices) IsSet() bool {
	return v.isSet
}

func (v *NullableV3CouchbaseServices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3CouchbaseServices(val *V3CouchbaseServices) *NullableV3CouchbaseServices {
	return &NullableV3CouchbaseServices{value: val, isSet: true}
}

func (v NullableV3CouchbaseServices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3CouchbaseServices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

