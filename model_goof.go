/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecloud

import (
	"encoding/json"
)

// Goof struct for Goof
type Goof struct {
	Message string `json:"message"`
	ErrorType string `json:"errorType"`
}

// NewGoof instantiates a new Goof object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoof(message string, errorType string) *Goof {
	this := Goof{}
	this.Message = message
	this.ErrorType = errorType
	return &this
}

// NewGoofWithDefaults instantiates a new Goof object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoofWithDefaults() *Goof {
	this := Goof{}
	return &this
}

// GetMessage returns the Message field value
func (o *Goof) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Goof) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Goof) SetMessage(v string) {
	o.Message = v
}

// GetErrorType returns the ErrorType field value
func (o *Goof) GetErrorType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value
// and a boolean to check if the value has been set.
func (o *Goof) GetErrorTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ErrorType, true
}

// SetErrorType sets field value
func (o *Goof) SetErrorType(v string) {
	o.ErrorType = v
}

func (o Goof) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["errorType"] = o.ErrorType
	}
	return json.Marshal(toSerialize)
}

type NullableGoof struct {
	value *Goof
	isSet bool
}

func (v NullableGoof) Get() *Goof {
	return v.value
}

func (v *NullableGoof) Set(val *Goof) {
	v.value = val
	v.isSet = true
}

func (v NullableGoof) IsSet() bool {
	return v.isSet
}

func (v *NullableGoof) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoof(val *Goof) *NullableGoof {
	return &NullableGoof{value: val, isSet: true}
}

func (v NullableGoof) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoof) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


