/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecloud

import (
	"encoding/json"
)

// UpdateDatabaseUserRequest struct for UpdateDatabaseUserRequest
type UpdateDatabaseUserRequest struct {
	// Organization user to update which is assigned to the database user. 
	UserId *string `json:"userId,omitempty"`
	Username *string `json:"username,omitempty"`
	Password *string `json:"password,omitempty"`
	Buckets *[]BucketRole `json:"buckets,omitempty"`
	AllBucketsAccess *BucketRoleTypes `json:"allBucketsAccess,omitempty"`
}

// NewUpdateDatabaseUserRequest instantiates a new UpdateDatabaseUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDatabaseUserRequest() *UpdateDatabaseUserRequest {
	this := UpdateDatabaseUserRequest{}
	return &this
}

// NewUpdateDatabaseUserRequestWithDefaults instantiates a new UpdateDatabaseUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDatabaseUserRequestWithDefaults() *UpdateDatabaseUserRequest {
	this := UpdateDatabaseUserRequest{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UpdateDatabaseUserRequest) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatabaseUserRequest) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UpdateDatabaseUserRequest) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UpdateDatabaseUserRequest) SetUserId(v string) {
	o.UserId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UpdateDatabaseUserRequest) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatabaseUserRequest) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UpdateDatabaseUserRequest) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UpdateDatabaseUserRequest) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UpdateDatabaseUserRequest) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatabaseUserRequest) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UpdateDatabaseUserRequest) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UpdateDatabaseUserRequest) SetPassword(v string) {
	o.Password = &v
}

// GetBuckets returns the Buckets field value if set, zero value otherwise.
func (o *UpdateDatabaseUserRequest) GetBuckets() []BucketRole {
	if o == nil || o.Buckets == nil {
		var ret []BucketRole
		return ret
	}
	return *o.Buckets
}

// GetBucketsOk returns a tuple with the Buckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatabaseUserRequest) GetBucketsOk() (*[]BucketRole, bool) {
	if o == nil || o.Buckets == nil {
		return nil, false
	}
	return o.Buckets, true
}

// HasBuckets returns a boolean if a field has been set.
func (o *UpdateDatabaseUserRequest) HasBuckets() bool {
	if o != nil && o.Buckets != nil {
		return true
	}

	return false
}

// SetBuckets gets a reference to the given []BucketRole and assigns it to the Buckets field.
func (o *UpdateDatabaseUserRequest) SetBuckets(v []BucketRole) {
	o.Buckets = &v
}

// GetAllBucketsAccess returns the AllBucketsAccess field value if set, zero value otherwise.
func (o *UpdateDatabaseUserRequest) GetAllBucketsAccess() BucketRoleTypes {
	if o == nil || o.AllBucketsAccess == nil {
		var ret BucketRoleTypes
		return ret
	}
	return *o.AllBucketsAccess
}

// GetAllBucketsAccessOk returns a tuple with the AllBucketsAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatabaseUserRequest) GetAllBucketsAccessOk() (*BucketRoleTypes, bool) {
	if o == nil || o.AllBucketsAccess == nil {
		return nil, false
	}
	return o.AllBucketsAccess, true
}

// HasAllBucketsAccess returns a boolean if a field has been set.
func (o *UpdateDatabaseUserRequest) HasAllBucketsAccess() bool {
	if o != nil && o.AllBucketsAccess != nil {
		return true
	}

	return false
}

// SetAllBucketsAccess gets a reference to the given BucketRoleTypes and assigns it to the AllBucketsAccess field.
func (o *UpdateDatabaseUserRequest) SetAllBucketsAccess(v BucketRoleTypes) {
	o.AllBucketsAccess = &v
}

func (o UpdateDatabaseUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Buckets != nil {
		toSerialize["buckets"] = o.Buckets
	}
	if o.AllBucketsAccess != nil {
		toSerialize["allBucketsAccess"] = o.AllBucketsAccess
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateDatabaseUserRequest struct {
	value *UpdateDatabaseUserRequest
	isSet bool
}

func (v NullableUpdateDatabaseUserRequest) Get() *UpdateDatabaseUserRequest {
	return v.value
}

func (v *NullableUpdateDatabaseUserRequest) Set(val *UpdateDatabaseUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDatabaseUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDatabaseUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDatabaseUserRequest(val *UpdateDatabaseUserRequest) *NullableUpdateDatabaseUserRequest {
	return &NullableUpdateDatabaseUserRequest{value: val, isSet: true}
}

func (v NullableUpdateDatabaseUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDatabaseUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


