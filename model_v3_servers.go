/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecapella

import (
	"encoding/json"
)

// V3Servers struct for V3Servers
type V3Servers struct {
	// How many nodes, value >= 3, <= 27. Total nodes in the cluster <= 27
	Size int32 `json:"size"`
	// Compute instance type
	Compute string `json:"compute"`
	// Array of couchbase services to be installed on the nodes
	Services []V3CouchbaseServices `json:"services"`
	Storage V3ServersStorage `json:"storage"`
}

// NewV3Servers instantiates a new V3Servers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3Servers(size int32, compute string, services []V3CouchbaseServices, storage V3ServersStorage) *V3Servers {
	this := V3Servers{}
	this.Size = size
	this.Compute = compute
	this.Services = services
	this.Storage = storage
	return &this
}

// NewV3ServersWithDefaults instantiates a new V3Servers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3ServersWithDefaults() *V3Servers {
	this := V3Servers{}
	return &this
}

// GetSize returns the Size field value
func (o *V3Servers) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *V3Servers) GetSizeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *V3Servers) SetSize(v int32) {
	o.Size = v
}

// GetCompute returns the Compute field value
func (o *V3Servers) GetCompute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Compute
}

// GetComputeOk returns a tuple with the Compute field value
// and a boolean to check if the value has been set.
func (o *V3Servers) GetComputeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Compute, true
}

// SetCompute sets field value
func (o *V3Servers) SetCompute(v string) {
	o.Compute = v
}

// GetServices returns the Services field value
func (o *V3Servers) GetServices() []V3CouchbaseServices {
	if o == nil {
		var ret []V3CouchbaseServices
		return ret
	}

	return o.Services
}

// GetServicesOk returns a tuple with the Services field value
// and a boolean to check if the value has been set.
func (o *V3Servers) GetServicesOk() (*[]V3CouchbaseServices, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Services, true
}

// SetServices sets field value
func (o *V3Servers) SetServices(v []V3CouchbaseServices) {
	o.Services = v
}

// GetStorage returns the Storage field value
func (o *V3Servers) GetStorage() V3ServersStorage {
	if o == nil {
		var ret V3ServersStorage
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *V3Servers) GetStorageOk() (*V3ServersStorage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Storage, true
}

// SetStorage sets field value
func (o *V3Servers) SetStorage(v V3ServersStorage) {
	o.Storage = v
}

func (o V3Servers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["size"] = o.Size
	}
	if true {
		toSerialize["compute"] = o.Compute
	}
	if true {
		toSerialize["services"] = o.Services
	}
	if true {
		toSerialize["storage"] = o.Storage
	}
	return json.Marshal(toSerialize)
}

type NullableV3Servers struct {
	value *V3Servers
	isSet bool
}

func (v NullableV3Servers) Get() *V3Servers {
	return v.value
}

func (v *NullableV3Servers) Set(val *V3Servers) {
	v.value = val
	v.isSet = true
}

func (v NullableV3Servers) IsSet() bool {
	return v.isSet
}

func (v *NullableV3Servers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3Servers(val *V3Servers) *NullableV3Servers {
	return &NullableV3Servers{value: val, isSet: true}
}

func (v NullableV3Servers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3Servers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


