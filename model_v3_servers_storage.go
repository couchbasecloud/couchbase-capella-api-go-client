/*
Couchbase Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package couchbasecapella

import (
	"encoding/json"
)

// V3ServersStorage struct for V3ServersStorage
type V3ServersStorage struct {
	Type V3StorageType `json:"type"`
	// Min 3000 for GP3, 1000 if IO2. If storageType=\"GP3\", max = 16000.  If storageType= \"IO2\", max= 64000
	IOPS int32 `json:"IOPS"`
	// Min 50Gb, max 16Tb
	Size int32 `json:"size"`
}

// NewV3ServersStorage instantiates a new V3ServersStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3ServersStorage(type_ V3StorageType, iOPS int32, size int32) *V3ServersStorage {
	this := V3ServersStorage{}
	this.Type = type_
	this.IOPS = iOPS
	this.Size = size
	return &this
}

// NewV3ServersStorageWithDefaults instantiates a new V3ServersStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3ServersStorageWithDefaults() *V3ServersStorage {
	this := V3ServersStorage{}
	return &this
}

// GetType returns the Type field value
func (o *V3ServersStorage) GetType() V3StorageType {
	if o == nil {
		var ret V3StorageType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *V3ServersStorage) GetTypeOk() (*V3StorageType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *V3ServersStorage) SetType(v V3StorageType) {
	o.Type = v
}

// GetIOPS returns the IOPS field value
func (o *V3ServersStorage) GetIOPS() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IOPS
}

// GetIOPSOk returns a tuple with the IOPS field value
// and a boolean to check if the value has been set.
func (o *V3ServersStorage) GetIOPSOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IOPS, true
}

// SetIOPS sets field value
func (o *V3ServersStorage) SetIOPS(v int32) {
	o.IOPS = v
}

// GetSize returns the Size field value
func (o *V3ServersStorage) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *V3ServersStorage) GetSizeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *V3ServersStorage) SetSize(v int32) {
	o.Size = v
}

func (o V3ServersStorage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["IOPS"] = o.IOPS
	}
	if true {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableV3ServersStorage struct {
	value *V3ServersStorage
	isSet bool
}

func (v NullableV3ServersStorage) Get() *V3ServersStorage {
	return v.value
}

func (v *NullableV3ServersStorage) Set(val *V3ServersStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableV3ServersStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableV3ServersStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3ServersStorage(val *V3ServersStorage) *NullableV3ServersStorage {
	return &NullableV3ServersStorage{value: val, isSet: true}
}

func (v NullableV3ServersStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3ServersStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


